name: Bloga Deploy
on:
  push:
  repository_dispatch:
    types: [redeploy]
env:
  BLOGA_CLIENT_ID: ${{ secrets.BLOGA_CLIENT_ID }}
  BLOGA_CLIENT_SECRET: ${{ secrets.BLOGA_CLIENT_SECRET }}
  BLOGA_SITE_CONFIG_URL: ${{ secrets.BLOGA_SITE_CONFIG_URL }}
  SSH_DEPLOY_KEY: ${{secrets.SSH_DEPLOY_KEY }}
  UPGRADE_BRANCH: bloga-automated-upgrade
jobs:
  init:
    runs-on: ubuntu-latest
    # outpus result type is string, true will be "true"
    outputs:
      isFirstCommit: ${{ steps.isFirstCommit.outputs.result }}
      repositoryName: ${{ steps.repositoryName.outputs.result}}
      sourceBranch: ${{ steps.sourceBranch.outputs.result }}
      deployBranch: ${{ steps.deployBranch.outputs.result }}
      isDeployBranchExist: ${{ steps.isDeployBranchExist.outputs.result }}
      isSourceBranch: ${{ steps.isSourceBranch.outputs.result }}
      blogaAccessToken: ${{ steps.blogaAccessToken.outputs.result }}
      blogaSiteId: ${{ steps.blogaSiteId.outputs.result }}
      pathPrefix: ${{ steps.pathPrefix.outputs.result }}
      cname: ${{ steps.cname.outputs.result }}
      visitUrl: ${{ steps.visitUrl.outputs.result }}
      templateRepo: ${{ steps.templateRepo.outputs.result }}
      templateBranch: ${{ steps.templateBranch.outputs.result }}
      AUTH1_CLIENT_ID: ${{ steps.AUTH1_CLIENT_ID.outputs.result }}
      AUTH1_CLIENT_SECRET: ${{ steps.AUTH1_CLIENT_SECRET.outputs.result }}
      isValidForBuild: ${{ steps.isValidForBuild.outputs.result }}
    steps:
      - id: isFirstCommit
        name: Check is first commit
        uses: actions/github-script@v2
        env:
          COMMIT_MESSAGE: ${{ github.event.commits[0].message }}
          RUN_NUMBER: ${{ github.run_number }}
        with:
          script: return (process.env.RUN_NUMBER == '1')
          result-encoding: string
      - id: repositoryName
        name: get repository name
        uses: actions/github-script@v2
        with:
          script: return context.repo.repo
          result-encoding: string
      - id: sourceBranch
        name: get source branch
        uses: actions/github-script@v2
        with:
          script: |
            if(context.repo.repo === `${context.repo.owner}.github.io`){
              return 'source'
            }else{
              return 'master'
            }
          result-encoding: string
      - id: deployBranch
        name: get deploy branch
        uses: actions/github-script@v2
        with:
          script: |
            if(context.repo.repo === `${context.repo.owner}.github.io`){
              return 'master'
            }else{
              return 'gh-pages'
            }
          result-encoding: string
      - id: isSourceBranch
        name: get current branch is source branch
        uses: actions/github-script@v2
        env:
          SOURCE_BRANCH: ${{ steps.sourceBranch.outputs.result }}
        with:
          script: |
            if(`refs/heads/${process.env.SOURCE_BRANCH}` === context.ref){
              return true
            }else{
              return false
            }
          result-encoding: string
      - id: isDeployBranchExist
        name: get is deploy branch exist
        uses: actions/github-script@v2
        env:
          DEPLOY_BRANCH: ${{ steps.deployBranch.outputs.result }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            return github.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: process.env.DEPLOY_BRANCH
            }).then(data=>{
              return true;
            }).catch((e)=>{
              if(e && e.status===404){
                // then manual trigger
                return false
              }else{
                core.setFailed('check isDeployBranchExist error: ',e.message)
              }
            })

      - id: blogaSiteId
        name: get bloga site id
        if: (env.BLOGA_SITE_CONFIG_URL)
        uses: actions/github-script@v2
        with:
          script: |
            const siteSettingsUrl = process.env.BLOGA_SITE_CONFIG_URL
            if(siteSettingsUrl){
              let startIndex = siteSettingsUrl.indexOf('/sites/')
              const endIndex = siteSettingsUrl.indexOf('/settings')
              if(startIndex && endIndex){
                startIndex += 7;
                const siteId = siteSettingsUrl.substring(startIndex,endIndex)
                return siteId
              }else{
                core.setFailed('can not detect a valid bloga site config url')
              }

            } else {
              core.setFailed('can not detect bloga site config url')
            }
          result-encoding: string
      - id: blogaAccessTokenResponse
        name: get bloga access token response
        if: (env.BLOGA_CLIENT_ID) && (env.BLOGA_CLIENT_SECRET)
        uses: CamiloGarciaLaRotta/watermelon-http-client@v1.4
        with:
          url: "https://auth.owenyoung.com/api/v1/oauth/token"
          method: "POST"
          headers: '{"Content-Type": "application/json"}'
          data: '{"client_id": "${{ env.BLOGA_CLIENT_ID }}","client_secret": "${{ env.BLOGA_CLIENT_SECRET }}","grant_type":"client_credentials"}'
      - id: blogaAccessToken
        name: get bloga access token
        if: (steps.blogaAccessTokenResponse.outcome == 'success')
        uses: actions/github-script@v2
        env:
          RESPONSE: ${{ steps.blogaAccessTokenResponse.outputs.response }}
        with:
          script: |
            const response = JSON.parse(process.env.RESPONSE)
            if(response.data.access_token){
              return response.data.access_token
            }else{
              core.setFailed(`Can not get bloga access token`);
            }
          result-encoding: string
      - id: blogaSettingsResponse
        name: get bloga settings response
        if: (env.BLOGA_SITE_CONFIG_URL)
        uses: CamiloGarciaLaRotta/watermelon-http-client@v1.4
        with:
          url: ${{ env.BLOGA_SITE_CONFIG_URL }}
          method: "GET"
          headers: '{"Content-Type": "application/json"}'
      - id: pathPrefix
        name: get path prefix
        if: steps.blogaSettingsResponse.outcome == 'success'
        uses: actions/github-script@v2
        env:
          RESPONSE: ${{ steps.blogaSettingsResponse.outputs.response }}
        with:
          script: |
            const response = JSON.parse(process.env.RESPONSE)
            if(response.pathPrefix){
              return response.pathPrefix
            }else{
              return ""
            }
          result-encoding: string
      - id: cname
        name: get cname
        if: steps.blogaSettingsResponse.outcome == 'success'
        uses: actions/github-script@v2
        env:
          RESPONSE: ${{ steps.blogaSettingsResponse.outputs.response }}
        with:
          script: |
            const response = JSON.parse(process.env.RESPONSE)
            if(response.cname){
              return response.cname
            }else{
              return ""
            }
          result-encoding: string
      - id: visitUrl
        name: get visit url
        if: steps.blogaSettingsResponse.outcome == 'success'
        uses: actions/github-script@v2
        env:
          RESPONSE: ${{ steps.blogaSettingsResponse.outputs.response }}
        with:
          script: |
            const response = JSON.parse(process.env.RESPONSE)
            if(response.visit_url){
              return response.visit_url
            }else{
              return ""
            }
          result-encoding: string
      - id: templateRepo
        name: get template repo
        if: steps.blogaSettingsResponse.outcome == 'success'
        uses: actions/github-script@v2
        env:
          RESPONSE: ${{ steps.blogaSettingsResponse.outputs.response }}
        with:
          script: |
            const response = JSON.parse(process.env.RESPONSE)
            if(response.template_repo){
              return response.template_repo
            }else{
              return ""
            }
          result-encoding: string
      - id: templateBranch
        name: get template branch
        if: steps.blogaSettingsResponse.outcome == 'success'
        uses: actions/github-script@v2
        env:
          RESPONSE: ${{ steps.blogaSettingsResponse.outputs.response }}
        with:
          script: |
            const response = JSON.parse(process.env.RESPONSE)
            if(response.template_branch){
              return response.template_branch
            }else{
              return ""
            }
          result-encoding: string
      - id: blogaAuth1ClientResponse
        name: get bloga auth1 client response
        if: steps.blogaAccessToken.outcome == 'success'
        continue-on-error: true
        uses: CamiloGarciaLaRotta/watermelon-http-client@v1.4
        with:
          url: "https://api.bloga.owenyoung.com/api/v1/apps/auth1/client"
          method: "GET"
          headers: '{"Content-Type": "application/json","Authorization":"Bearer ${{ steps.blogaAccessToken.outputs.result }}"}'
      - id: AUTH1_CLIENT_ID
        name: get auth1 client id
        if: steps.blogaAuth1ClientResponse.outcome == 'success'
        uses: actions/github-script@v2
        env:
          RESPONSE: ${{ steps.blogaAuth1ClientResponse.outputs.response }}
        with:
          script: |
            const response = JSON.parse(process.env.RESPONSE)
            if(response.data.client_id){
              return response.data.client_id
            }else{
              return ""
            }
          result-encoding: string
      - id: AUTH1_CLIENT_SECRET
        name: get auth1 client secret
        if: steps.blogaAuth1ClientResponse.outcome == 'success'
        uses: actions/github-script@v2
        env:
          RESPONSE: ${{ steps.blogaAuth1ClientResponse.outputs.response }}
        with:
          script: |
            const response = JSON.parse(process.env.RESPONSE)
            if(response.data.client_secret){
              return response.data.client_secret
            }else{
              return ""
            }
          result-encoding: string
      - id: isValidForBuild
        name: check if valid for build
        uses: actions/github-script@v2
        env:
          RESPONSE: ${{ steps.blogaAuth1ClientResponse.outputs.response }}
        with:
          script: |
            if(process.env.SSH_DEPLOY_KEY && process.env.BLOGA_SITE_CONFIG_URL && process.env.BLOGA_CLIENT_ID && process.env.BLOGA_CLIENT_SECRET){
              return true
            }else{
              return false
            }
          result-encoding: string

  build:
    needs: init
    runs-on: ubuntu-latest
    name: Build
    if: (needs.init.outputs.isFirstCommit=='false')  && (needs.init.outputs.isSourceBranch=='true') && (needs.init.outputs.isValidForBuild == 'true')
    env:
      AUTH1_CLIENT_ID: ${{ needs.init.outputs.AUTH1_CLIENT_ID }}
      AUTH1_CLIENT_SECRET: ${{ needs.init.outputs.AUTH1_CLIENT_SECRET }}
    steps:
      - name: mast secret value
        if: steps.isFirstCommit.outputs.result == 'false'
        uses: actions/github-script@v2
        with:
          script: |
            core.setSecret(process.env.AUTH1_CLIENT_ID)
            core.setSecret(process.env.AUTH1_CLIENT_SECRET)
      - name: Dump INIT_OUTPUTS
        run: echo $INIT_OUTPUTS
        env:
          INIT_OUTPUTS: ${{ toJson(needs.init.outputs) }}
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get gatsby cache key from last build
        id: get-gatsby-latest-cache-key-file
        if: needs.init.outputs.isDeployBranchExist == 'true'
        uses: actions/checkout@v2
        continue-on-error: true
        with:
          ref: ${{ needs.init.outputs.deployBranch }}
          path: .bloga-last-build
      - name: Get gatsby-latest-cache-key content
        if: ${{ steps.get-gatsby-latest-cache-key-file.outcome == 'success' }}
        id: gatsby-latest-cache-key
        run: echo "::set-output name=key::$(cat .bloga-last-build/_gatsby-latest-cache-key.txt)"
      - name: Get yarn cache directory
        id: yarn-cache-dir
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Gatsby cache directory restore
        uses: actions/cache@v2
        if: ${{ steps.gatsby-latest-cache-key.outcome == 'success' }}
        with:
          key: ${{ runner.os }}-${{ steps.gatsby-latest-cache-key.outputs.key }}
          path: |
            .cache
            public
      - name: Yarn cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Yarn install
        run: "yarn --pure-lockfile"
      - name: Build app
        if: (needs.init.outputs.pathPrefix == '')
        run: yarn build
      - name: Build app with prefix path
        if: (needs.init.outputs.pathPrefix != '')
        run: yarn build --prefix-paths
      - name: Get gatsby latest cache folder hash
        id: gatsby-latest-cache-hash
        uses: theowenyoung/folder-hash@v2.0.1
        with:
          path: |
            .cache
            public
      - name: Save gatsby cache directory
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-gatsby-cache-directory-${{ steps.gatsby-latest-cache-hash.outputs.hash}}
          path: |
            .cache
            public
      - name: Save cache key to file
        run: echo gatsby-cache-directory-${{ steps.gatsby-latest-cache-hash.outputs.hash}} > public/_gatsby-latest-cache-key.txt
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3.6.1
        with:
          deploy_key: ${{ secrets.SSH_DEPLOY_KEY }}
          publish_dir: ./public
          publish_branch: ${{ needs.init.outputs.deployBranch }}
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          cname: ${{ needs.init.outputs.cname }}
      - name: Check is need trigger the site build
        id: isNeedTriggerSiteBuild
        uses: actions/github-script@v2
        env:
          DEPLOY_BRANCH: ${{ needs.init.outputs.deployBranch }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            return github.request(`GET /repos/:owner/:repo/pages`,{
              owner: context.repo.owner,
              repo: context.repo.repo,
            }).then(data=>{
              console.log('data',data)
              return false;
            }).catch((e)=>{
              console.log('e',e)
              if(e && e.status===404){
                // then manual trigger
                return true
              }else{
                core.setFailed('check is need trigger page build error: ',e.message)
              }
            })
      - name: trigger site build
        if: steps.isNeedTriggerSiteBuild.outputs.result == 'true'
        uses: CamiloGarciaLaRotta/watermelon-http-client@v1.4
        with:
          url: "https://api.bloga.owenyoung.com/api/v1/sites/${{ needs.init.outputs.blogaSiteId }}/github-pages"
          method: "POST"
          headers: '{"Content-Type": "application/json","Authorization":"Bearer ${{ needs.init.outputs.blogaAccessToken }}"}'
  post-build:
    needs:
      - init
      - build
    runs-on: ubuntu-latest
    name: Post Build
    steps:
      - name: Check if Pages Visit URl changed
        id: isVisitUrlChanged
        uses: actions/github-script@v2
        env:
          VISIT_URL: ${{ needs.init.outputs.visitUrl }}
        with:
          result-encoding: string
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            return github.repos.getPages({
              owner: context.repo.owner,
              repo: context.repo.repo,
            }).then((data)=>{
              if(data.status===200 && data.data && data.data.html_url){
                if(data.data.html_url === process.env.VISIT_URL){
                  return false
                }else{
                  return data.data.html_url
                }
              }else{
                return false
              }
            }).catch(e=>{
              core.error(`Get page info error, ${e}`)
              return false;
            })
      - name: Change visit url
        if: steps.isVisitUrlChanged.outputs.result != 'false' && needs.init.outputs.blogaAccessToken
        uses: CamiloGarciaLaRotta/watermelon-http-client@v1.4
        with:
          url: "https://api.bloga.owenyoung.com/api/v1/sites/${{ needs.init.outputs.blogaSiteId }}"
          method: "PATCH"
          headers: '{"Content-Type": "application/json","Authorization":"Bearer ${{ needs.init.outputs.blogaAccessToken }}"}'
          data: '{"visit_url":"${{steps.isVisitUrlChanged.outputs.result}}"}'
